// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PostcardsWeb.DataAccess.Data;

#nullable disable

namespace PostcardsWeb.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PostcardsWeb.Models.Border", b =>
                {
                    b.Property<int>("BorderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorderId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("BorderId");

                    b.ToTable("Borders");

                    b.HasData(
                        new
                        {
                            BorderId = 1,
                            Name = "Smooth"
                        },
                        new
                        {
                            BorderId = 2,
                            Name = "Recortado"
                        });
                });

            modelBuilder.Entity("PostcardsWeb.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandAbr")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("BrandCountryId")
                        .HasColumnType("int");

                    b.Property<string>("BrandImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyGroup")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WebPage")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("BrandId");

                    b.HasIndex("BrandCountryId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("PostcardsWeb.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<string>("BackColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackColorEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackImg")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BackOrientId")
                        .HasColumnType("int");

                    b.Property<string>("BackText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackTextEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackTextOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CardBorderId")
                        .HasColumnType("int");

                    b.Property<int>("CardBrandId")
                        .HasColumnType("int");

                    b.Property<int>("CardColorId")
                        .HasColumnType("int");

                    b.Property<string>("CardDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardMatId")
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CardShapeId")
                        .HasColumnType("int");

                    b.Property<int>("CardSizeId")
                        .HasColumnType("int");

                    b.Property<string>("CardTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("FrontColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontColorEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontImg")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FrontOrientId")
                        .HasColumnType("int");

                    b.Property<string>("FrontText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontTextEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontTextOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasFrame")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFav")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIdentical")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiview")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPuzzle")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeries")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NameOrig")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NamePt")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("NeedReplace")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("OriginCountryId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoYear")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("PrintYear")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("PrintedCountryId")
                        .HasColumnType("int");

                    b.Property<string>("PuzzleFrtImg")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ShwBckImg")
                        .HasColumnType("bit");

                    b.Property<bool>("ShwFrtImg")
                        .HasColumnType("bit");

                    b.Property<string>("TotalPhotos")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("WebPage")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CardId");

                    b.HasIndex("BackOrientId");

                    b.HasIndex("CardBorderId");

                    b.HasIndex("CardBrandId");

                    b.HasIndex("CardColorId");

                    b.HasIndex("CardMatId");

                    b.HasIndex("CardShapeId");

                    b.HasIndex("CardSizeId");

                    b.HasIndex("FrontOrientId");

                    b.HasIndex("OriginCountryId");

                    b.HasIndex("PrintedCountryId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("PostcardsWeb.Models.CardIdent", b =>
                {
                    b.Property<int>("IdentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentId"));

                    b.Property<int?>("CardIdentId")
                        .HasColumnType("int");

                    b.Property<int?>("CardOrigId")
                        .HasColumnType("int");

                    b.Property<string>("DescBckIdent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescFrtIdent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdentId");

                    b.HasIndex("CardIdentId");

                    b.HasIndex("CardOrigId");

                    b.ToTable("CardIdents");
                });

            modelBuilder.Entity("PostcardsWeb.Models.Coloration", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("ColorId");

                    b.ToTable("Colorations");

                    b.HasData(
                        new
                        {
                            ColorId = 1,
                            Name = "Colored"
                        },
                        new
                        {
                            ColorId = 2,
                            Name = "Black & White"
                        },
                        new
                        {
                            ColorId = 3,
                            Name = "Sepia"
                        },
                        new
                        {
                            ColorId = 4,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("PostcardsWeb.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsoLang")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("IsoRegion")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NamePt")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("PostcardsWeb.Models.Material", b =>
                {
                    b.Property<int>("MatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MatId");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            MatId = 1,
                            Name = "Coconut"
                        },
                        new
                        {
                            MatId = 2,
                            Name = "Cork"
                        },
                        new
                        {
                            MatId = 3,
                            Name = "Metal/Copper"
                        },
                        new
                        {
                            MatId = 4,
                            Name = "Paper/Cardboard"
                        },
                        new
                        {
                            MatId = 5,
                            Name = "Tile/Ceramics"
                        },
                        new
                        {
                            MatId = 6,
                            Name = "Wood"
                        });
                });

            modelBuilder.Entity("PostcardsWeb.Models.Orientation", b =>
                {
                    b.Property<int>("OrientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrientId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("OrientId");

                    b.ToTable("Orientations");

                    b.HasData(
                        new
                        {
                            OrientId = 1,
                            Name = "Horizontal"
                        },
                        new
                        {
                            OrientId = 2,
                            Name = "Vertical"
                        },
                        new
                        {
                            OrientId = 3,
                            Name = "Horizontal/Vertical"
                        },
                        new
                        {
                            OrientId = 4,
                            Name = "None"
                        });
                });

            modelBuilder.Entity("PostcardsWeb.Models.Serie", b =>
                {
                    b.Property<int>("SerieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerieId"));

                    b.Property<string>("BackColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackImg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("BackOrientId")
                        .HasColumnType("int");

                    b.Property<string>("BackText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barcode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FrontColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontImg")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FrontOrientId")
                        .HasColumnType("int");

                    b.Property<string>("FrontText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasFrame")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsIdentical")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMultiview")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsScan")
                        .HasColumnType("bit");

                    b.Property<string>("NameOrig")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NamePt")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OriginCountryId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoYear")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("PrintYear")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int?>("SerieCardId")
                        .HasColumnType("int");

                    b.Property<int?>("SerieColorId")
                        .HasColumnType("int");

                    b.Property<string>("SerieDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerieDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerieNumber")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("SerieTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ShwBckImg")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShwFrtImg")
                        .HasColumnType("bit");

                    b.Property<string>("TotalPhotos")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("WebPage")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("SerieId");

                    b.HasIndex("BackOrientId");

                    b.HasIndex("FrontOrientId");

                    b.HasIndex("OriginCountryId");

                    b.HasIndex("SerieCardId");

                    b.HasIndex("SerieColorId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("PostcardsWeb.Models.Shape", b =>
                {
                    b.Property<int>("ShapeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShapeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("ShapeId");

                    b.ToTable("Shapes");

                    b.HasData(
                        new
                        {
                            ShapeId = 1,
                            Name = "Rectangular"
                        },
                        new
                        {
                            ShapeId = 2,
                            Name = "Rounded"
                        },
                        new
                        {
                            ShapeId = 3,
                            Name = "Squared"
                        },
                        new
                        {
                            ShapeId = 4,
                            Name = "Flower"
                        },
                        new
                        {
                            ShapeId = 5,
                            Name = "Triangular"
                        });
                });

            modelBuilder.Entity("PostcardsWeb.Models.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            SizeId = 1,
                            Name = "Regular"
                        },
                        new
                        {
                            SizeId = 2,
                            Name = "Big"
                        },
                        new
                        {
                            SizeId = 3,
                            Name = "Small"
                        },
                        new
                        {
                            SizeId = 4,
                            Name = "Round"
                        },
                        new
                        {
                            SizeId = 5,
                            Name = "Square"
                        },
                        new
                        {
                            SizeId = 6,
                            Name = "N/D"
                        });
                });

            modelBuilder.Entity("PostcardsWeb.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostcardsWeb.Models.Brand", b =>
                {
                    b.HasOne("PostcardsWeb.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("BrandCountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PostcardsWeb.Models.Card", b =>
                {
                    b.HasOne("PostcardsWeb.Models.Orientation", "Orientation2")
                        .WithMany()
                        .HasForeignKey("BackOrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostcardsWeb.Models.Border", "Border")
                        .WithMany()
                        .HasForeignKey("CardBorderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostcardsWeb.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("CardBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostcardsWeb.Models.Coloration", "Coloration")
                        .WithMany()
                        .HasForeignKey("CardColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostcardsWeb.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("CardMatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostcardsWeb.Models.Shape", "Shape")
                        .WithMany()
                        .HasForeignKey("CardShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostcardsWeb.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("CardSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostcardsWeb.Models.Orientation", "Orientation1")
                        .WithMany()
                        .HasForeignKey("FrontOrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostcardsWeb.Models.Country", "Country1")
                        .WithMany()
                        .HasForeignKey("OriginCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostcardsWeb.Models.Country", "Country2")
                        .WithMany()
                        .HasForeignKey("PrintedCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Border");

                    b.Navigation("Brand");

                    b.Navigation("Coloration");

                    b.Navigation("Country1");

                    b.Navigation("Country2");

                    b.Navigation("Material");

                    b.Navigation("Orientation1");

                    b.Navigation("Orientation2");

                    b.Navigation("Shape");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("PostcardsWeb.Models.CardIdent", b =>
                {
                    b.HasOne("PostcardsWeb.Models.Card", "Card2")
                        .WithMany()
                        .HasForeignKey("CardIdentId");

                    b.HasOne("PostcardsWeb.Models.Card", "Card1")
                        .WithMany()
                        .HasForeignKey("CardOrigId");

                    b.Navigation("Card1");

                    b.Navigation("Card2");
                });

            modelBuilder.Entity("PostcardsWeb.Models.Serie", b =>
                {
                    b.HasOne("PostcardsWeb.Models.Orientation", "Orientation2")
                        .WithMany()
                        .HasForeignKey("BackOrientId");

                    b.HasOne("PostcardsWeb.Models.Orientation", "Orientation1")
                        .WithMany()
                        .HasForeignKey("FrontOrientId");

                    b.HasOne("PostcardsWeb.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("OriginCountryId");

                    b.HasOne("PostcardsWeb.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("SerieCardId");

                    b.HasOne("PostcardsWeb.Models.Coloration", "Coloration")
                        .WithMany()
                        .HasForeignKey("SerieColorId");

                    b.Navigation("Card");

                    b.Navigation("Coloration");

                    b.Navigation("Country");

                    b.Navigation("Orientation1");

                    b.Navigation("Orientation2");
                });
#pragma warning restore 612, 618
        }
    }
}
